package observations

import (
	"encoding/json"
	"strconv"
	"time"

	"github.com/kelseyhightower/envconfig"

	"github.com/ipfs/ipfs-cluster/config"
)

const configKey = "observations"
const envConfigKey = "cluster_observations"

// Default values for this Config.
const (
	DefaultEnableStats            = false
	DefaultPrometheusEndpoint     = ":8888"
	DefaultStatsReportingInterval = 2 * time.Second

	DefaultEnableTracing       = false
	DefaultJaegerAgentEndpoint = "0.0.0.0:6831"
	// DefaultJaegerCollectorEndpoint = "http://0.0.0.0:14268/api/traces"
	DefaultJaegerCollectorEndpoint = "http://0.0.0.0:14268"
	DefaultTracingSamplingProb     = 0.3
	DefaultTracingServiceName      = "cluster-daemon"
)

// Config allows to initialize observation tooling
// (metrics and tracing) with customized parameters.
type Config struct {
	config.Saver

	EnableStats            bool
	PrometheusEndpoint     string
	StatsReportingInterval time.Duration

	EnableTracing           bool
	JaegerAgentEndpoint     string
	JaegerCollectorEndpoint string
	TracingSamplingProb     float64
	TracingServiceName      string
}

type jsonConfig struct {
	EnableStats            string `json:"enable_stats"`
	PrometheusEndpoint     string `json:"prometheus_endpoint"`
	StatsReportingInterval string `json:"metrics_reporting_interval"`

	EnableTracing           string  `json:"enable_tracing"`
	JaegerAgentEndpoint     string  `json:"jaeger_agent_endpoint"`
	JaegerCollectorEndpoint string  `json:"jaeger_collector_endpoint"`
	TracingSamplingProb     float64 `json:"tracing_sampling_prob"`
	TracingServiceName      string  `json:"tracing_service_name"`
}

// ConfigKey provides a human-friendly identifier for this type of Config.
func (cfg *Config) ConfigKey() string {
	return configKey
}

// Default sets the fields of this Config to sensible values.
func (cfg *Config) Default() error {
	cfg.EnableStats = DefaultEnableStats
	cfg.PrometheusEndpoint = DefaultPrometheusEndpoint
	cfg.StatsReportingInterval = DefaultStatsReportingInterval

	cfg.EnableTracing = DefaultEnableTracing
	cfg.JaegerAgentEndpoint = DefaultJaegerAgentEndpoint
	cfg.JaegerCollectorEndpoint = DefaultJaegerCollectorEndpoint
	cfg.TracingSamplingProb = DefaultTracingSamplingProb
	cfg.TracingServiceName = DefaultTracingServiceName
	return nil
}

// Validate checks that the fields of this Config have working values,
// at least in appearance.
func (cfg *Config) Validate() error {
	//TODO(lanzafame)
	return nil
}

// LoadJSON sets the fields of this Config to the values defined by the JSON
// representation of it, as generated by ToJSON.
func (cfg *Config) LoadJSON(raw []byte) error {
	jcfg := &jsonConfig{}
	err := json.Unmarshal(raw, jcfg)
	if err != nil {
		logger.Error("Error unmarshaling observations config")
		return err
	}

	cfg.Default()

	// override json config with env var
	err = envconfig.Process(envConfigKey, jcfg)
	if err != nil {
		return err
	}

	err = cfg.loadMetricsOptions(jcfg)
	if err != nil {
		return err
	}

	err = cfg.loadTracingOptions(jcfg)
	if err != nil {
		return err
	}

	return cfg.Validate()
}

func (cfg *Config) loadMetricsOptions(jcfg *jsonConfig) error {
	var err error
	cfg.EnableStats, err = strconv.ParseBool(jcfg.EnableStats)
	if err != nil {
		return err
	}
	cfg.PrometheusEndpoint = jcfg.PrometheusEndpoint

	return config.ParseDurations(
		configKey,
		&config.DurationOpt{Duration: jcfg.StatsReportingInterval, Dst: &cfg.StatsReportingInterval, Name: "metrics_reporting_interval"},
	)
}

func (cfg *Config) loadTracingOptions(jcfg *jsonConfig) error {
	var err error
	cfg.EnableTracing, err = strconv.ParseBool(jcfg.EnableTracing)
	if err != nil {
		return err
	}
	cfg.JaegerAgentEndpoint = jcfg.JaegerAgentEndpoint
	cfg.JaegerCollectorEndpoint = jcfg.JaegerCollectorEndpoint
	cfg.TracingSamplingProb = jcfg.TracingSamplingProb
	cfg.TracingServiceName = jcfg.TracingServiceName

	return nil
}

// ToJSON generates a human-friendly JSON representation of this Config.
func (cfg *Config) ToJSON() ([]byte, error) {
	jcfg := &jsonConfig{
		EnableStats:             strconv.FormatBool(cfg.EnableStats),
		PrometheusEndpoint:      cfg.PrometheusEndpoint,
		StatsReportingInterval:  cfg.StatsReportingInterval.String(),
		EnableTracing:           strconv.FormatBool(cfg.EnableTracing),
		JaegerAgentEndpoint:     cfg.JaegerAgentEndpoint,
		JaegerCollectorEndpoint: cfg.JaegerCollectorEndpoint,
		TracingSamplingProb:     cfg.TracingSamplingProb,
		TracingServiceName:      cfg.TracingServiceName,
	}

	return config.DefaultJSONMarshal(jcfg)
}
